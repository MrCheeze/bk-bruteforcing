import numpy as np
from numpy import float32, float64
import math
import copy
import re
from sys import argv
import random


from bk_math_lib import *
from bk_movement_sim import *

distinct_x_inputs = [-59, -58, -57, -56, -55, -54, -53, -52, -51, -50, -49, -48, -47, -46, -45, -44, -43, -42, -41, -40, -39, -38, -37, -36, -35, -34, -33, -32, -31, -30, -29, -28, -27, -26, -25, -24, -23, -22, -21, -20, -19, -18, -17, -16, -15, -14, -13, -12, -11, -10, -9, -8, 0, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59]
distinct_y_inputs = [-61, -60, -59, -58, -57, -56, -55, -54, -53, -52, -51, -50, -49, -48, -47, -46, -45, -44, -43, -42, -41, -40, -39, -38, -37, -36, -35, -34, -33, -32, -31, -30, -29, -28, -27, -26, -25, -24, -23, -22, -21, -20, -19, -18, -17, -16, -15, -14, -13, -12, -11, -10, -9, -8, 0, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61]

useless_inputs = [(-59, -61), (-59, -58), (-59, -56), (-59, -48), (-59, -42), (-59, -41), (-59, -40), (-59, -34), (-59, 34), (-59, 40), (-59, 41), (-59, 42), (-59, 48), (-59, 56), (-59, 58), (-59, 61), (-58, -60), (-58, -51), (-58, 51), (-58, 60), (-57, -60), (-57, -58), (-57, -46), (-57, 46), (-57, 58), (-57, 60), (-56, -58), (-56, -48), (-56, -41), (-56, -38), (-56, -33), (-56, 33), (-56, 38), (-56, 41), (-56, 48), (-56, 58), (-55, -56), (-55, -51), (-55, 51), (-55, 56), (-54, -60), (-54, -59), (-54, -56), (-54, -50), (-54, -44), (-54, 44), (-54, 50), (-54, 56), (-54, 59), (-54, 60), (-53, -61), (-53, -59), (-53, -58), (-53, -54), (-53, -50), (-53, -48), (-53, -39), (-53, 39), (-53, 48), (-53, 50), (-53, 54), (-53, 58), (-53, 59), (-53, 61), (-52, -57), (-52, -54), (-52, 54), (-52, 57), (-50, -60), (-50, -56), (-50, -52), (-50, 52), (-50, 56), (-50, 60), (-49, -61), (-49, -56), (-49, -50), (-49, 50), (-49, 56), (-49, 61), (-48, -50), (-48, 50), (-46, -60), (-46, -59), (-46, -58), (-46, -56), (-46, 56), (-46, 58), (-46, 59), (-46, 60), (-41, -60), (-41, 60), (-40, -58), (-40, 58), (-37, -59), (-37, 59), (-33, -61), (-33, 61), (-28, -61), (-28, 61), (-13, -9), (-13, -8), (-13, 0), (-13, 8), (-13, 9), (-12, -11), (-12, -10), (-12, -9), (-12, -8), (-12, 0), (-12, 8), (-12, 9), (-12, 10), (-12, 11), (-11, -12), (-11, -11), (-11, -10), (-11, -9), (-11, -8), (-11, 0), (-11, 8), (-11, 9), (-11, 10), (-11, 11), (-11, 12), (-10, -13), (-10, -12), (-10, -11), (-10, -10), (-10, -9), (-10, -8), (-10, 0), (-10, 8), (-10, 9), (-10, 10), (-10, 11), (-10, 12), (-10, 13), (-9, -13), (-9, -12), (-9, -11), (-9, -10), (-9, -9), (-9, -8), (-9, 0), (-9, 8), (-9, 9), (-9, 10), (-9, 11), (-9, 12), (-9, 13), (-8, -13), (-8, -12), (-8, -11), (-8, -10), (-8, -9), (-8, -8), (-8, 0), (-8, 8), (-8, 9), (-8, 10), (-8, 11), (-8, 12), (-8, 13), (0, -13), (0, -12), (0, -11), (0, -10), (0, -9), (0, -8), (0, 8), (0, 9), (0, 10), (0, 11), (0, 12), (0, 13), (8, -13), (8, -12), (8, -11), (8, -10), (8, -9), (8, -8), (8, 0), (8, 8), (8, 9), (8, 10), (8, 11), (8, 12), (8, 13), (9, -13), (9, -12), (9, -11), (9, -10), (9, -9), (9, -8), (9, 0), (9, 8), (9, 9), (9, 10), (9, 11), (9, 12), (9, 13), (10, -13), (10, -12), (10, -11), (10, -10), (10, -9), (10, -8), (10, 0), (10, 8), (10, 9), (10, 10), (10, 11), (10, 12), (10, 13), (11, -12), (11, -11), (11, -10), (11, -9), (11, -8), (11, 0), (11, 8), (11, 9), (11, 10), (11, 11), (11, 12), (12, -11), (12, -10), (12, -9), (12, -8), (12, 0), (12, 8), (12, 9), (12, 10), (12, 11), (13, -9), (13, -8), (13, 0), (13, 8), (13, 9), (28, -61), (28, 61), (33, -61), (33, 61), (37, -59), (37, 59), (40, -58), (40, 58), (41, -60), (41, 60), (46, -60), (46, -59), (46, -58), (46, -56), (46, 56), (46, 58), (46, 59), (46, 60), (48, -50), (48, 50), (49, -61), (49, -56), (49, -50), (49, 50), (49, 56), (49, 61), (50, -60), (50, -56), (50, -52), (50, 52), (50, 56), (50, 60), (52, -57), (52, -54), (52, 54), (52, 57), (53, -61), (53, -59), (53, -58), (53, -54), (53, -50), (53, -48), (53, -39), (53, 39), (53, 48), (53, 50), (53, 54), (53, 58), (53, 59), (53, 61), (54, -60), (54, -59), (54, -56), (54, -50), (54, -44), (54, 44), (54, 50), (54, 56), (54, 59), (54, 60), (55, -56), (55, -51), (55, 51), (55, 56), (56, -58), (56, -48), (56, -41), (56, -38), (56, -33), (56, 33), (56, 38), (56, 41), (56, 48), (56, 58), (57, -60), (57, -58), (57, -46), (57, 46), (57, 58), (57, 60), (58, -60), (58, -51), (58, 51), (58, 60), (59, -61), (59, -58), (59, -56), (59, -48), (59, -42), (59, -41), (59, -40), (59, -34), (59, 34), (59, 40), (59, 41), (59, 42), (59, 48), (59, 56), (59, 58), (59, 61)]

# (x, y) inputs that will have distinct results when input
distinct_inputs = []
for x in distinct_x_inputs:
    for y in distinct_y_inputs:
        if (x, y) not in useless_inputs:
            distinct_inputs.append((x, y))

# (x, 0) and (0, y) inputs that will have distinct results when input
distinct_x_inputs = [x for x in distinct_x_inputs if abs(x) > 13 or x == 0]
distinct_y_inputs = [y for y in distinct_y_inputs if abs(y) > 13 or y == 0]

# For when angle is irrelevant but need to move by a low magnitude
distinct_low_magnitudes = [(0, 0), (0, 14), (0, 15), (0, 16), (0, 17), (0, 18), (8, 14), (8, 15), (8, 16), (8, 17), (9, 14), (9, 15), (9, 16), (9, 17), (10, 14), (10, 15), (10, 16), (10, 17), (11, 14), (11, 15), (11, 17), (12, 12), (12, 13), (12, 14), (12, 16), (12, 17), (13, 10), (13, 11), (13, 13), (13, 14), (13, 15), (13, 16), (14, 9), (14, 11), (14, 13), (14, 14), (14, 15), (15, 0), (15, 9), (15, 10), (15, 12), (15, 13), (15, 14), (16, 9), (16, 11), (16, 13), (17, 0), (17, 8), (17, 9), (17, 10)]

distinct_magnitudes = [(0, 0), (0, 14), (0, 15), (0, 16), (0, 17), (0, 18), (0, 19), (0, 20), (0, 21), (0, 22), (0, 23), (0, 24), (0, 25), (0, 26), (0, 27), (0, 28), (0, 29), (0, 30), (0, 31), (0, 32), (0, 33), (0, 34), (0, 35), (0, 36), (0, 37), (0, 38), (0, 39), (0, 40), (0, 41), (0, 42), (0, 43), (0, 44), (0, 45), (0, 46), (0, 47), (0, 48), (0, 49), (0, 50), (0, 51), (0, 52), (0, 53), (0, 54), (0, 55), (0, 56), (0, 57), (0, 58), (0, 59), (0, 60), (0, 61), (8, 14), (8, 15), (8, 16), (8, 17), (8, 18), (8, 19), (8, 20), (8, 21), (8, 22), (8, 23), (8, 24), (8, 25), (8, 26), (8, 27), (8, 28), (8, 29), (8, 30), (8, 31), (8, 32), (8, 33), (8, 34), (8, 35), (8, 36), (8, 37), (8, 38), (8, 39), (8, 40), (8, 41), (8, 42), (8, 43), (8, 44), (8, 45), (8, 46), (8, 47), (8, 48), (8, 49), (8, 50), (8, 51), (8, 52), (8, 53), (8, 54), (8, 55), (8, 56), (8, 57), (8, 58), (8, 59), (8, 60), (9, 14), (9, 15), (9, 16), (9, 17), (9, 18), (9, 19), (9, 20), (9, 21), (9, 22), (9, 23), (9, 24), (9, 25), (9, 26), (9, 27), (9, 28), (9, 29), (9, 30), (9, 31), (9, 32), (9, 33), (9, 34), (9, 35), (9, 36), (9, 37), (9, 38), (9, 39), (9, 40), (9, 41), (9, 42), (9, 43), (9, 44), (9, 45), (9, 46), (9, 47), (9, 48), (9, 49), (9, 50), (9, 51), (9, 52), (9, 53), (9, 54), (9, 55), (9, 56), (9, 57), (9, 58), (9, 59), (9, 60), (10, 14), (10, 15), (10, 16), (10, 17), (10, 18), (10, 19), (10, 20), (10, 21), (10, 22), (10, 23), (10, 24), (10, 25), (10, 26), (10, 27), (10, 28), (10, 29), (10, 30), (10, 31), (10, 32), (10, 33), (10, 34), (10, 35), (10, 36), (10, 37), (10, 38), (10, 39), (10, 40), (10, 41), (10, 42), (10, 43), (10, 44), (10, 45), (10, 46), (10, 47), (10, 48), (10, 49), (10, 50), (10, 51), (10, 52), (10, 53), (10, 54), (10, 55), (10, 56), (10, 57), (10, 58), (10, 59), (10, 60), (11, 14), (11, 15), (11, 17), (11, 18), (11, 19), (11, 20), (11, 21), (11, 22), (11, 23), (11, 24), (11, 25), (11, 26), (11, 27), (11, 28), (11, 29), (11, 30), (11, 31), (11, 32), (11, 33), (11, 34), (11, 35), (11, 36), (11, 37), (11, 38), (11, 39), (11, 40), (11, 41), (11, 42), (11, 43), (11, 44), (11, 45), (11, 46), (11, 47), (11, 48), (11, 49), (11, 50), (11, 51), (11, 52), (11, 53), (11, 54), (11, 55), (11, 56), (11, 57), (11, 58), (11, 59), (11, 60), (12, 12), (12, 13), (12, 14), (12, 16), (12, 17), (12, 19), (12, 20), (12, 21), (12, 22), (12, 23), (12, 24), (12, 25), (12, 26), (12, 27), (12, 28), (12, 29), (12, 30), (12, 31), (12, 32), (12, 33), (12, 34), (12, 35), (12, 36), (12, 37), (12, 38), (12, 39), (12, 40), (12, 41), (12, 42), (12, 43), (12, 44), (12, 45), (12, 46), (12, 47), (12, 48), (12, 49), (12, 50), (12, 51), (12, 52), (12, 53), (12, 54), (12, 55), (12, 56), (12, 57), (12, 58), (12, 59), (12, 60), (13, 10), (13, 11), (13, 13), (13, 14), (13, 15), (13, 16), (13, 17), (13, 18), (13, 20), (13, 21), (13, 23), (13, 24), (13, 25), (13, 26), (13, 27), (13, 28), (13, 29), (13, 30), (13, 31), (13, 32), (13, 33), (13, 35), (13, 36), (13, 37), (13, 38), (13, 39), (13, 40), (13, 41), (13, 42), (13, 43), (13, 44), (13, 45), (13, 46), (13, 47), (13, 48), (13, 49), (13, 50), (13, 51), (13, 52), (13, 53), (13, 54), (13, 55), (13, 56), (13, 57), (13, 58), (13, 59), (13, 60), (14, 9), (14, 11), (14, 13), (14, 14), (14, 15), (14, 16), (14, 17), (14, 18), (14, 19), (14, 20), (14, 22), (14, 23), (14, 25), (14, 26), (14, 27), (14, 28), (14, 29), (14, 30), (14, 31), (14, 32), (14, 33), (14, 34), (14, 35), (14, 36), (14, 37), (14, 38), (14, 39), (14, 40), (14, 41), (14, 42), (14, 43), (14, 44), (14, 45), (14, 46), (14, 47), (14, 48), (14, 49), (14, 50), (14, 51), (14, 52), (14, 53), (14, 54), (14, 55), (14, 56), (14, 57), (14, 58), (14, 59), (14, 60), (15, 0), (15, 9), (15, 10), (15, 12), (15, 13), (15, 14), (15, 16), (15, 17), (15, 19), (15, 20), (15, 21), (15, 22), (15, 23), (15, 24), (15, 26), (15, 27), (15, 29), (15, 30), (15, 32), (15, 33), (15, 34), (15, 35), (15, 36), (15, 37), (15, 38), (15, 40), (15, 41), (15, 42), (15, 43), (15, 44), (15, 45), (15, 46), (15, 47), (15, 48), (15, 49), (15, 50), (15, 51), (15, 52), (15, 53), (15, 54), (15, 56), (15, 57), (15, 58), (15, 59), (15, 60), (16, 9), (16, 11), (16, 13), (16, 17), (16, 18), (16, 19), (16, 21), (16, 22), (16, 23), (16, 24), (16, 25), (16, 26), (16, 28), (16, 29), (16, 31), (16, 32), (16, 33), (16, 34), (16, 35), (16, 36), (16, 37), (16, 38), (16, 39), (16, 40), (16, 41), (16, 42), (16, 43), (16, 44), (16, 45), (16, 46), (16, 47), (16, 48), (16, 49), (16, 50), (16, 51), (16, 52), (16, 53), (16, 54), (16, 55), (16, 56), (16, 57), (16, 58), (16, 59), (16, 60), (17, 0), (17, 8), (17, 9), (17, 10), (17, 12), (17, 15), (17, 16), (17, 17), (17, 19), (17, 20), (17, 22), (17, 23), (17, 25), (17, 26), (17, 27), (17, 28), (17, 29), (17, 30), (17, 32), (17, 33), (17, 35), (17, 36), (17, 37), (17, 38), (17, 39), (17, 40), (17, 41), (17, 42), (17, 43), (17, 44), (17, 45), (17, 46), (17, 47), (17, 48), (17, 50), (17, 51), (17, 52), (17, 53), (17, 54), (17, 55), (17, 56), (17, 57), (17, 58), (17, 59), (17, 60), (18, 9), (18, 11), (18, 13), (18, 17), (18, 18), (18, 20), (18, 21), (18, 22), (18, 24), (18, 25), (18, 27), (18, 28), (18, 29), (18, 30), (18, 31), (18, 32), (18, 34), (18, 36), (18, 37), (18, 38), (18, 39), (18, 40), (18, 41), (18, 42), (18, 43), (18, 45), (18, 46), (18, 47), (18, 48), (18, 49), (18, 51), (18, 52), (18, 53), (18, 54), (18, 55), (18, 56), (18, 57), (18, 58), (18, 59), (18, 60), (19, 0), (19, 9), (19, 11), (19, 12), (19, 13), (19, 14), (19, 15), (19, 18), (19, 19), (19, 21), (19, 22), (19, 23), (19, 24), (19, 25), (19, 26), (19, 28), (19, 29), (19, 31), (19, 32), (19, 33), (19, 34), (19, 35), (19, 36), (19, 37), (19, 38), (19, 39), (19, 40), (19, 41), (19, 43), (19, 44), (19, 45), (19, 46), (19, 47), (19, 48), (19, 49), (19, 50), (19, 51), (19, 52), (19, 53), (19, 54), (19, 55), (19, 56), (19, 57), (19, 58), (20, 9), (20, 13), (20, 15), (20, 17), (20, 19), (20, 20), (20, 23), (20, 25), (20, 26), (20, 28), (20, 29), (20, 30), (20, 33), (20, 34), (20, 35), (20, 36), (20, 37), (20, 38), (20, 39), (20, 40), (20, 41), (20, 42), (20, 43), (20, 44), (20, 45), (20, 47), (20, 48), (20, 49), (20, 52), (20, 53), (20, 54), (20, 55), (20, 56), (20, 57), (20, 58), (20, 59), (21, 0), (21, 10), (21, 11), (21, 12), (21, 14), (21, 15), (21, 17), (21, 18), (21, 19), (21, 20), (21, 22), (21, 25), (21, 27), (21, 28), (21, 29), (21, 30), (21, 31), (21, 32), (21, 33), (21, 35), (21, 36), (21, 37), (21, 38), (21, 41), (21, 42), (21, 44), (21, 45), (21, 46), (21, 47), (21, 48), (21, 49), (21, 50), (21, 51), (21, 53), (21, 54), (21, 55), (21, 57), (21, 58), (21, 59), (22, 11), (22, 13), (22, 15), (22, 19), (22, 22), (22, 23), (22, 24), (22, 26), (22, 28), (22, 29), (22, 30), (22, 31), (22, 32), (22, 33), (22, 34), (22, 36), (22, 38), (22, 39), (22, 40), (22, 41), (22, 42), (22, 43), (22, 44), (22, 45), (22, 46), (22, 47), (22, 48), (22, 49), (22, 50), (22, 51), (22, 52), (22, 53), (22, 54), (22, 55), (22, 56), (22, 57), (23, 0), (23, 8), (23, 10), (23, 11), (23, 13), (23, 16), (23, 17), (23, 18), (23, 20), (23, 21), (23, 24), (23, 25), (23, 26), (23, 27), (23, 28), (23, 30), (23, 31), (23, 34), (23, 35), (23, 37), (23, 39), (23, 40), (23, 41), (23, 42), (23, 43), (23, 44), (23, 45), (23, 47), (23, 48), (23, 49), (23, 50), (23, 51), (23, 52), (23, 54), (23, 55), (23, 56), (23, 57), (23, 58), (24, 9), (24, 11), (24, 15), (24, 17), (24, 19), (24, 20), (24, 22), (24, 24), (24, 25), (24, 27), (24, 28), (24, 30), (24, 31), (24, 32), (24, 33), (24, 34), (24, 35), (24, 36), (24, 37), (24, 39), (24, 40), (24, 41), (24, 42), (24, 43), (24, 44), (24, 45), (24, 47), (24, 48), (24, 49), (24, 50), (24, 51), (24, 52), (24, 53), (24, 54), (24, 55), (24, 56), (24, 57), (24, 58), (25, 0), (25, 9), (25, 12), (25, 14), (25, 16), (25, 19), (25, 20), (25, 21), (25, 22), (25, 23), (25, 24), (25, 27), (25, 29), (25, 31), (25, 32), (25, 33), (25, 34), (25, 35), (25, 36), (25, 37), (25, 38), (25, 39), (25, 40), (25, 41), (25, 43), (25, 44), (25, 45), (25, 47), (25, 48), (25, 49), (25, 50), (25, 51), (25, 54), (25, 55), (25, 56), (25, 57), (25, 58), (26, 11), (26, 13), (26, 20), (26, 24), (26, 28), (26, 29), (26, 30), (26, 31), (26, 33), (26, 34), (26, 35), (26, 36), (26, 37), (26, 38), (26, 39), (26, 41), (26, 42), (26, 44), (26, 45), (26, 46), (26, 47), (26, 48), (26, 49), (26, 51), (26, 52), (26, 53), (26, 54), (26, 55), (26, 57), (27, 0), (27, 9), (27, 10), (27, 13), (27, 15), (27, 16), (27, 17), (27, 19), (27, 22), (27, 23), (27, 25), (27, 26), (27, 27), (27, 28), (27, 30), (27, 32), (27, 33), (27, 36), (27, 37), (27, 39), (27, 40), (27, 41), (27, 42), (27, 43), (27, 44), (27, 45), (27, 46), (27, 47), (27, 49), (27, 50), (27, 51), (27, 52), (27, 53), (27, 55), (27, 57), (28, 9), (28, 11), (28, 13), (28, 15), (28, 17), (28, 22), (28, 26), (28, 29), (28, 30), (28, 31), (28, 32), (28, 33), (28, 34), (28, 35), (28, 36), (28, 37), (28, 38), (28, 39), (28, 40), (28, 41), (28, 43), (28, 44), (28, 45), (28, 46), (28, 47), (28, 49), (28, 50), (28, 51), (28, 52), (28, 53), (28, 54), (28, 55), (28, 56), (29, 0), (29, 9), (29, 11), (29, 12), (29, 13), (29, 15), (29, 18), (29, 21), (29, 22), (29, 23), (29, 24), (29, 26), (29, 27), (29, 28), (29, 29), (29, 31), (29, 32), (29, 34), (29, 36), (29, 37), (29, 38), (29, 41), (29, 43), (29, 46), (29, 47), (29, 48), (29, 49), (29, 50), (29, 51), (29, 52), (29, 55), (29, 56), (30, 9), (30, 11), (30, 13), (30, 15), (30, 17), (30, 19), (30, 20), (30, 22), (30, 26), (30, 28), (30, 30), (30, 31), (30, 32), (30, 35), (30, 36), (30, 37), (30, 39), (30, 40), (30, 41), (30, 42), (30, 43), (30, 44), (30, 45), (30, 46), (30, 47), (30, 48), (30, 49), (30, 50), (30, 51), (30, 52), (30, 53), (30, 54), (30, 55), (31, 0), (31, 8), (31, 10), (31, 11), (31, 14), (31, 17), (31, 18), (31, 19), (31, 20), (31, 21), (31, 24), (31, 27), (31, 30), (31, 31), (31, 33), (31, 34), (31, 35), (31, 37), (31, 38), (31, 41), (31, 42), (31, 43), (31, 44), (31, 45), (31, 48), (31, 49), (31, 51), (31, 52), (31, 53), (31, 54), (31, 55), (32, 9), (32, 15), (32, 17), (32, 19), (32, 20), (32, 22), (32, 24), (32, 26), (32, 28), (32, 32), (32, 33), (32, 34), (32, 35), (32, 36), (32, 37), (32, 38), (32, 39), (32, 40), (32, 42), (32, 43), (32, 44), (32, 45), (32, 46), (32, 47), (32, 48), (32, 49), (32, 50), (32, 51), (32, 53), (33, 9), (33, 13), (33, 15), (33, 17), (33, 19), (33, 20), (33, 22), (33, 26), (33, 28), (33, 32), (33, 34), (33, 35), (33, 36), (33, 39), (33, 40), (33, 42), (33, 43), (33, 44), (33, 45), (33, 47), (33, 49), (33, 50), (33, 51), (33, 52), (33, 53), (33, 54), (34, 11), (34, 13), (34, 17), (34, 19), (34, 20), (34, 22), (34, 24), (34, 28), (34, 30), (34, 35), (34, 37), (34, 39), (34, 41), (34, 42), (34, 43), (34, 44), (34, 45), (34, 47), (34, 48), (34, 50), (34, 51), (34, 52), (34, 53), (35, 0), (35, 9), (35, 11), (35, 13), (35, 14), (35, 16), (35, 19), (35, 22), (35, 24), (35, 25), (35, 26), (35, 27), (35, 29), (35, 30), (35, 31), (35, 32), (35, 33), (35, 34), (35, 36), (35, 37), (35, 38), (35, 39), (35, 40), (35, 41), (35, 43), (35, 44), (35, 45), (35, 46), (35, 47), (35, 48), (35, 49), (35, 50), (35, 51), (36, 9), (36, 15), (36, 17), (36, 20), (36, 22), (36, 26), (36, 28), (36, 30), (36, 37), (36, 38), (36, 39), (36, 40), (36, 41), (36, 42), (36, 43), (36, 44), (36, 45), (36, 47), (36, 48), (36, 49), (36, 50), (36, 51), (36, 52), (37, 0), (37, 8), (37, 11), (37, 14), (37, 15), (37, 17), (37, 18), (37, 20), (37, 23), (37, 24), (37, 25), (37, 27), (37, 28), (37, 29), (37, 30), (37, 33), (37, 34), (37, 35), (37, 37), (37, 41), (37, 42), (37, 45), (37, 47), (37, 48), (37, 49), (37, 51), (38, 9), (38, 11), (38, 13), (38, 15), (38, 19), (38, 20), (38, 22), (38, 24), (38, 26), (38, 28), (38, 30), (38, 32), (38, 36), (38, 39), (38, 40), (38, 41), (38, 43), (38, 45), (38, 46), (38, 47), (38, 48), (38, 49), (38, 50), (39, 0), (39, 8), (39, 10), (39, 11), (39, 17), (39, 18), (39, 20), (39, 21), (39, 23), (39, 24), (39, 27), (39, 29), (39, 30), (39, 31), (39, 32), (39, 34), (39, 35), (39, 36), (39, 37), (39, 38), (39, 39), (39, 42), (39, 44), (39, 45), (39, 48), (39, 49), (40, 9), (40, 13), (40, 15), (40, 17), (40, 19), (40, 20), (40, 22), (40, 26), (40, 28), (40, 30), (40, 32), (40, 36), (40, 40), (40, 41), (40, 42), (40, 43), (40, 44), (40, 45), (40, 46), (40, 47), (40, 49), (41, 9), (41, 11), (41, 12), (41, 13), (41, 14), (41, 21), (41, 22), (41, 24), (41, 26), (41, 27), (41, 29), (41, 31), (41, 32), (41, 33), (41, 34), (41, 35), (41, 36), (41, 38), (41, 39), (41, 40), (41, 41), (41, 42), (41, 43), (41, 45), (41, 46), (41, 48), (42, 19), (42, 26), (42, 30), (42, 32), (42, 38), (42, 40), (42, 42), (42, 43), (42, 46), (42, 47), (43, 10), (43, 13), (43, 15), (43, 16), (43, 17), (43, 19), (43, 20), (43, 22), (43, 23), (43, 25), (43, 27), (43, 28), (43, 29), (43, 31), (43, 33), (43, 36), (43, 37), (43, 39), (43, 40), (43, 43), (43, 46), (44, 15), (44, 17), (44, 22), (44, 24), (44, 26), (44, 28), (44, 30), (44, 36), (44, 42), (44, 45), (44, 46), (45, 9), (45, 11), (45, 12), (45, 13), (45, 14), (45, 16), (45, 21), (45, 22), (45, 24), (45, 25), (45, 27), (45, 29), (45, 31), (45, 32), (45, 33), (45, 34), (45, 35), (45, 36), (45, 38), (45, 39), (45, 40), (45, 41), (45, 43), (45, 44), (46, 9), (46, 13), (46, 15), (46, 19), (46, 22), (46, 26), (46, 28), (46, 32), (46, 36), (46, 40), (47, 8), (47, 11), (47, 14), (47, 15), (47, 17), (47, 21), (47, 24), (47, 25), (47, 27), (47, 28), (47, 30), (47, 31), (47, 33), (47, 34), (47, 35), (47, 37), (47, 38), (47, 41), (47, 42), (48, 11), (48, 13), (48, 19), (48, 20), (48, 22), (48, 24), (48, 26), (48, 32), (48, 36), (48, 38), (49, 0), (49, 10), (49, 14), (49, 15), (49, 16), (49, 18), (49, 20), (49, 21), (49, 24), (49, 25), (49, 27), (49, 29), (49, 33), (49, 34), (49, 35), (49, 37), (49, 38), (50, 15), (50, 17), (50, 22), (50, 24), (50, 38), (51, 0), (51, 9), (51, 11), (51, 12), (51, 13), (51, 19), (51, 20), (51, 21), (51, 22), (51, 24), (51, 26), (51, 31), (51, 32), (51, 33), (51, 34), (51, 35), (52, 11), (52, 15), (52, 17), (52, 22), (52, 24), (52, 26), (52, 28), (53, 9), (53, 10), (53, 12), (53, 15), (53, 17), (53, 18), (53, 19), (53, 20), (53, 22), (53, 23), (53, 26), (53, 27), (53, 28), (53, 29), (53, 30), (53, 31), (53, 32), (54, 9), (54, 11), (54, 13), (54, 19), (54, 26), (54, 28), (55, 9), (55, 11), (55, 12), (55, 13), (55, 16), (55, 18), (55, 21), (55, 22), (55, 24), (55, 26), (55, 29), (56, 9), (56, 13), (56, 17), (56, 19), (56, 22), (56, 24), (57, 0), (57, 10), (57, 11), (57, 15), (57, 17), (57, 20), (57, 21), (57, 22), (58, 9), (58, 13), (58, 19)]

# Sequences of y inputs in midair that will displace you but leave you with speed 0
zero_speed_y_inputs_pal = [
    (-61, -49, 34, 59),
    (-61, 54, 0, 21),
    (-60, 18, 29, 40),
    (-60, 31, 18, 39),
    (-60, 37, -31, 54),
    (-60, 49, 49, -18),
    (-59, -35, 26, 55),
    (-59, -26, 51, 40),
    (-59, 39, 51, -17),
    (-58, 20, 23, 37),
    (-58, 54, -26, 33),
    (-57, 52, -20, 33),
    (-57, 54, -44, 46),
    (-56, 17, -36, 56),
    (-55, 19, 28, 24),
    (-55, 49, -42, 49),
    (-54, -18, 47, 30),
    (-53, 53, -45, 38),
    (-52, -35, 14, 53),
    (-52, -16, 20, 44),
    (-52, 46, -27, 37),
    (-52, 50, 28, -23),
    (-51, 19, 18, 19),
    (-51, 33, -39, 50),
    (-51, 42, -19, 32),
    (-51, 61, -32, -17),
    (-50, 39, 41, -26),
    (-49, 52, -39, 22),
    (-49, 61, -20, -33),
    (-48, -28, 27, 38),
    (-48, 16, -18, 43),
    (-48, 35, -24, 32),
    (-48, 44, 36, -32),
    (-48, 50, 18, -28),
    (-47, 31, -24, 35),
    (-47, 61, -23, -36),
    (-46, -14, 37, 15),
    (-46, 34, -51, 52),
    (-45, 40, -20, 21),
    (-44, 14, 14, 22),
    (-44, 38, -30, 31),
    (-42, -40, 36, 35),
    (-42, 44, -35, 27),
    (-42, 56, -24, -19),
    (-41, -19, 57, -38),
    (-40, -19, -35, 54),
    (-39, 23, -20, 30),
    (-37, -38, 44, 19),
    (-37, 24, 47, -37),
    (-37, 51, 14, -34),
    (-37, 59, -42, -19),
    (-36, 55, -55, 34),
    (-36, 56, -57, 39),
    (-36, 57, -40, -17),
    (-35, -43, 57, -22),
    (-35, 18, 23, -15),
    (-35, 22, -37, 41),
    (-35, 31, 46, -42),
    (-34, -44, 39, 28),
    (-34, 32, -23, 20),
    (-33, 27, -32, 32),
    (-33, 43, 31, -40),
    (-31, -48, 56, -17),
    (-30, -21, 15, 32),
    (-29, 22, -54, 53),
    (-29, 33, -45, 38),
    (-28, -28, 29, 19),
    (-28, 27, 26, -25),
    (-28, 30, 42, -42),
    (-27, -43, 37, 24),
    (-26, -14, 57, -50),
    (-26, 38, -54, 50),
    (-25, -26, -28, 51),
    (-25, 15, 43, -30),
    (-25, 21, -27, 26),
    (-25, 25, -39, 35),
    (-24, -51, 32, 43),
    (-24, -14, 54, -45),
    (-24, 27, -39, 33),
    (-24, 54, 31, -53),
    (-23, -29, -31, 52),
    (-23, -21, 14, 28),
    (-23, 14, 32, -18),
    (-22, -50, 35, 36),
    (-22, -18, 42, -14),
    (-21, 47, -41, 16),
    (-21, 50, 43, -53),
    (-21, 61, -51, -18),
    (-20, -52, 43, 33),
    (-20, -42, 57, -35),
    (-20, -26, 19, 20),
    (-20, 14, 35, -23),
    (-20, 28, -25, 17),
    (-19, -41, 32, 21),
    (-18, -42, 54, -22),
    (-18, 15, -18, 23),
    (-18, 40, -46, 24),
    (-17, -57, -17, 59),
    (-17, -48, 57, -33),
    (-17, -20, 40, -15),
    (-17, 23, -39, 29),
    (-17, 36, 24, -40),
    (-16, 19, -48, 40),
    (-16, 36, -57, 51),
    (-16, 59, -39, -40),
    (-15, -49, 38, 20),
    (15, 49, -38, -20),
    (16, -59, 39, 40),
    (16, -36, 57, -51),
    (16, -19, 48, -40),
    (17, -36, -24, 40),
    (17, -23, 39, -29),
    (17, 20, -40, 15),
    (17, 48, -57, 33),
    (17, 57, 17, -59),
    (18, -40, 46, -24),
    (18, -15, 18, -23),
    (18, 42, -54, 22),
    (19, 41, -32, -21),
    (20, -28, 25, -17),
    (20, -14, -35, 23),
    (20, 26, -19, -20),
    (20, 42, -57, 35),
    (20, 52, -43, -33),
    (21, -61, 51, 18),
    (21, -50, -43, 53),
    (21, -47, 41, -16),
    (22, 18, -42, 14),
    (22, 50, -35, -36),
    (23, -14, -32, 18),
    (23, 21, -14, -28),
    (23, 29, 31, -52),
    (24, -54, -31, 53),
    (24, -27, 39, -33),
    (24, 14, -54, 45),
    (24, 51, -32, -43),
    (25, -25, 39, -35),
    (25, -21, 27, -26),
    (25, -15, -43, 30),
    (25, 26, 28, -51),
    (26, -38, 54, -50),
    (26, 14, -57, 50),
    (27, 43, -37, -24),
    (28, -30, -42, 42),
    (28, -27, -26, 25),
    (28, 28, -29, -19),
    (29, -33, 45, -38),
    (29, -22, 54, -53),
    (30, 21, -15, -32),
    (31, 48, -56, 17),
    (33, -43, -31, 40),
    (33, -27, 32, -32),
    (34, -32, 23, -20),
    (34, 44, -39, -28),
    (35, -31, -46, 42),
    (35, -22, 37, -41),
    (35, -18, -23, 15),
    (35, 43, -57, 22),
    (36, -57, 40, 17),
    (36, -56, 57, -39),
    (36, -55, 55, -34),
    (37, -59, 42, 19),
    (37, -51, -14, 34),
    (37, -24, -47, 37),
    (37, 38, -44, -19),
    (39, -23, 20, -30),
    (40, 19, 35, -54),
    (41, 19, -57, 38),
    (42, -56, 24, 19),
    (42, -44, 35, -27),
    (42, 40, -36, -35),
    (44, -38, 30, -31),
    (44, -14, -14, -22),
    (45, -40, 20, -21),
    (46, -34, 51, -52),
    (46, 14, -37, -15),
    (47, -61, 23, 36),
    (47, -31, 24, -35),
    (48, -50, -18, 28),
    (48, -44, -36, 32),
    (48, -35, 24, -32),
    (48, -16, 18, -43),
    (48, 28, -27, -38),
    (49, -61, 20, 33),
    (49, -52, 39, -22),
    (50, -39, -41, 26),
    (51, -61, 32, 17),
    (51, -42, 19, -32),
    (51, -33, 39, -50),
    (51, -19, -18, -19),
    (52, -50, -28, 23),
    (52, -46, 27, -37),
    (52, 16, -20, -44),
    (52, 35, -14, -53),
    (53, -53, 45, -38),
    (54, 18, -47, -30),
    (55, -49, 42, -49),
    (55, -19, -28, -24),
    (56, -17, 36, -56),
    (57, -54, 44, -46),
    (57, -52, 20, -33),
    (58, -54, 26, -33),
    (58, -20, -23, -37),
    (59, -39, -51, 17),
    (59, 26, -51, -40),
    (59, 35, -26, -55),
    (60, -49, -49, 18),
    (60, -37, 31, -54),
    (60, -31, -18, -39),
    (60, -18, -29, -40),
    (61, -54, 0, -21),
    (61, 49, -34, -59),
]
zero_speed_y_inputs_ntsc = [
    (-61, 50, 18, 22),
    (-61, 61, -38, 29),
    (-59, 28, 29, 33),
    (-59, 30, 18, 40),
    (-58, 45, 21, 18),
    (-57, 25, 43, 16),
    (-57, 38, 26, 19),
    (-57, 44, -15, 43),
    (-56, 49, -31, 47),
    (-55, -36, 32, 52),
    (-55, -36, 50, 42),
    (-55, 60, 36, -49),
    (-54, -23, 17, 52),
    (-54, 28, 15, 31),
    (-53, -45, 43, 50),
    (-53, 37, -34, 50),
    (-53, 57, -59, 53),
    (-53, 57, 19, -38),
    (-52, -30, 51, 20),
    (-52, 21, 52, -27),
    (-51, -21, -38, 60),
    (-51, 23, -15, 41),
    (-51, 28, 48, -18),
    (-50, 47, -37, 39),
    (-49, 23, 61, -54),
    (-49, 46, -31, 33),
    (-49, 58, 50, -57),
    (-48, 41, 24, -18),
    (-48, 50, 17, -25),
    (-47, -46, -27, 60),
    (-47, 19, 0, 24),
    (-47, 22, -32, 48),
    (-47, 33, 57, -53),
    (-47, 60, -26, -28),
    (-46, -40, 50, 18),
    (-46, 25, 33, -16),
    (-46, 31, 36, -21),
    (-44, -28, 55, -18),
    (-44, 40, -45, 44),
    (-44, 55, -20, -18),
    (-43, -54, 21, 55),
    (-43, 18, 22, 0),
    (-43, 18, 22, 0),
    (-43, 18, 60, -54),
    (-43, 29, -31, 39),
    (-42, -60, 61, 22),
    (-42, 15, -33, 49),
    (-42, 23, 40, -23),
    (-42, 42, 28, -29),
    (-41, -40, 21, 47),
    (-41, 31, 42, -33),
    (-41, 35, 18, -16),
    (-41, 44, 22, -26),
    (-40, 20, -30, 42),
    (-40, 41, -29, 23),
    (-40, 46, 55, -56),
    (-39, -25, -24, 53),
    (-39, -24, -28, 54),
    (-39, -23, 17, 38),
    (-39, 15, 50, -32),
    (-38, -31, 57, -31),
    (-38, -17, -43, 55),
    (-38, 27, 61, -58),
    (-38, 54, -25, -17),
    (-37, -50, 48, 35),
    (-36, -61, 59, 30),
    (-35, -45, -37, 59),
    (-35, -45, 29, 41),
    (-35, -28, 26, 28),
    (-35, -25, 54, -24),
    (-35, 41, 21, -28),
    (-34, -47, 47, 24),
    (-34, -36, -41, 58),
    (-34, -34, 59, -39),
    (-34, -19, 17, 30),
    (-34, 45, -52, 48),
    (-33, 27, 36, -30),
    (-33, 37, -27, 19),
    (-32, -16, 20, 18),
    (-32, 53, -48, 14),
    (-32, 54, -16, -31),
    (-31, -26, 23, 26),
    (-31, 27, 38, -34),
    (-31, 27, 51, -50),
    (-31, 39, 18, -27),
    (-31, 48, 15, -28),
    (-30, 30, -31, 27),
    (-30, 38, 41, -46),
    (-30, 39, 59, -60),
    (-29, -51, 37, 44),
    (-28, 19, 33, -24),
    (-27, -37, 23, 33),
    (-27, 16, -33, 40),
    (-27, 31, 36, -38),
    (-27, 37, 23, -32),
    (-27, 57, -61, 43),
    (-27, 57, 0, -50),
    (-26, -35, 24, 29),
    (-25, -33, 61, -49),
    (-24, -41, -17, 52),
    (-24, 14, -38, 46),
    (-24, 30, 19, -24),
    (-24, 38, 47, -50),
    (-24, 46, -49, 31),
    (-23, -36, 33, 19),
    (-23, -35, 0, 46),
    (-23, -18, -46, 54),
    (-23, 15, 42, -30),
    (-23, 16, -18, 24),
    (-23, 18, -28, 29),
    (-23, 47, -54, 46),
    (-22, -39, 19, 35),
    (-22, 30, -19, 15),
    (-22, 61, -25, -49),
    (-21, -45, -23, 54),
    (-21, 15, 44, -34),
    (-21, 16, 58, -55),
    (-21, 24, -20, 17),
    (-21, 52, 25, -51),
    (-20, 32, 23, -33),
    (-19, -41, 32, 22),
    (-19, -29, 0, 39),
    (-19, 0, -14, 22),
    (-19, 28, 27, -34),
    (-18, -58, 43, 49),
    (-18, -37, 14, 39),
    (-18, 37, 14, -25),
    (-18, 40, -48, 27),
    (-17, 18, 28, -30),
    (-17, 41, 19, -41),
    (-16, -29, 22, 17),
    (-16, 21, -46, 37),
    (-16, 57, 18, -56),
    (-15, 31, 14, -26),
    (-14, -28, 19, 16),
    (-14, 28, 19, -36),
    (0, -43, 18, 22),
    (0, 43, -18, -22),
    (14, -28, -19, 36),
    (14, 28, -19, -16),
    (15, -31, -14, 26),
    (16, -57, -18, 56),
    (16, -21, 46, -37),
    (16, 29, -22, -17),
    (17, -41, -19, 41),
    (17, -18, -28, 30),
    (18, -40, 48, -27),
    (18, -37, -14, 25),
    (18, 37, -14, -39),
    (18, 58, -43, -49),
    (19, -28, -27, 34),
    (19, 0, 14, -22),
    (19, 29, 0, -39),
    (19, 41, -32, -22),
    (20, -32, -23, 33),
    (21, -52, -25, 51),
    (21, -24, 20, -17),
    (21, -16, -58, 55),
    (21, -15, -44, 34),
    (21, 45, 23, -54),
    (22, -61, 25, 49),
    (22, -30, 19, -15),
    (22, 39, -19, -35),
    (23, -47, 54, -46),
    (23, -18, 28, -29),
    (23, -16, 18, -24),
    (23, -15, -42, 30),
    (23, 18, 46, -54),
    (23, 35, 0, -46),
    (23, 36, -33, -19),
    (24, -46, 49, -31),
    (24, -38, -47, 50),
    (24, -30, -19, 24),
    (24, -14, 38, -46),
    (24, 41, 17, -52),
    (25, 33, -61, 49),
    (26, 35, -24, -29),
    (27, -57, 0, 50),
    (27, -57, 61, -43),
    (27, -37, -23, 32),
    (27, -31, -36, 38),
    (27, -16, 33, -40),
    (27, 37, -23, -33),
    (28, -19, -33, 24),
    (29, 51, -37, -44),
    (30, -39, -59, 60),
    (30, -38, -41, 46),
    (30, -30, 31, -27),
    (31, -48, -15, 28),
    (31, -39, -18, 27),
    (31, -27, -51, 50),
    (31, -27, -38, 34),
    (31, 26, -23, -26),
    (32, -54, 16, 31),
    (32, -53, 48, -14),
    (32, 16, -20, -18),
    (33, -37, 27, -19),
    (33, -27, -36, 30),
    (34, -45, 52, -48),
    (34, 19, -17, -30),
    (34, 34, -59, 39),
    (34, 36, 41, -58),
    (34, 47, -47, -24),
    (35, -41, -21, 28),
    (35, 25, -54, 24),
    (35, 28, -26, -28),
    (35, 45, -29, -41),
    (35, 45, 37, -59),
    (36, 61, -59, -30),
    (37, 50, -48, -35),
    (38, -54, 25, 17),
    (38, -27, -61, 58),
    (38, 17, 43, -55),
    (38, 31, -57, 31),
    (39, -15, -50, 32),
    (39, 23, -17, -38),
    (39, 24, 28, -54),
    (39, 25, 24, -53),
    (40, -46, -55, 56),
    (40, -41, 29, -23),
    (40, -20, 30, -42),
    (41, -44, -22, 26),
    (41, -35, -18, 16),
    (41, -31, -42, 33),
    (41, 40, -21, -47),
    (42, -42, -28, 29),
    (42, -23, -40, 23),
    (42, -15, 33, -49),
    (42, 60, -61, -22),
    (43, -29, 31, -39),
    (43, -18, -60, 54),
    (43, -18, -22, 0),
    (43, -18, -22, 0),
    (43, 54, -21, -55),
    (44, -55, 20, 18),
    (44, -40, 45, -44),
    (44, 28, -55, 18),
    (46, -31, -36, 21),
    (46, -25, -33, 16),
    (46, 40, -50, -18),
    (47, -60, 26, 28),
    (47, -33, -57, 53),
    (47, -22, 32, -48),
    (47, -19, 0, -24),
    (47, 46, 27, -60),
    (48, -50, -17, 25),
    (48, -41, -24, 18),
    (49, -58, -50, 57),
    (49, -46, 31, -33),
    (49, -23, -61, 54),
    (50, -47, 37, -39),
    (51, -28, -48, 18),
    (51, -23, 15, -41),
    (51, 21, 38, -60),
    (52, -21, -52, 27),
    (52, 30, -51, -20),
    (53, -57, -19, 38),
    (53, -57, 59, -53),
    (53, -37, 34, -50),
    (53, 45, -43, -50),
    (54, -28, -15, -31),
    (54, 23, -17, -52),
    (55, -60, -36, 49),
    (55, 36, -50, -42),
    (55, 36, -32, -52),
    (56, -49, 31, -47),
    (57, -44, 15, -43),
    (57, -38, -26, -19),
    (57, -25, -43, -16),
    (58, -45, -21, -18),
    (59, -30, -18, -40),
    (59, -28, -29, -33),
    (61, -61, 38, -29),
    (61, -50, -18, -22),
]

random.seed(413)
random.shuffle(zero_speed_y_inputs_pal)
random.shuffle(zero_speed_y_inputs_ntsc)
random.shuffle(distinct_x_inputs)
random.shuffle(distinct_y_inputs)
random.shuffle(distinct_inputs)
random.shuffle(distinct_magnitudes)
random.shuffle(distinct_low_magnitudes)

def printwrite(f, *args):
    s = ' '.join([str(arg) for arg in args])
    print(s)
    if f:
        f.write(s+'\n')

def do_search(game, f=None):

    printwrite(f, game)

    inputstring = []

    game_copy = copy.copy(game)
    game_copy._update_camera()
    if game_copy.camera.angle != game.camera.angle:
        printwrite(f, 'Camera has not yet converged! The sim will not work.')
        return
    
    gaps = {}
    for line in open('gap_results.txt'):
        match = re.search(r'(-?[0-9][0-9\.]*).* (-?[0-9][0-9\.]*)', line)
        if match:
            gap_coords = tuple(float32(s) for s in match.groups())
            cam_angle = ml_vec3f_yaw_between(gap_coords, game._get_target_camera_pos(gap_coords))
            if cam_angle not in gaps:
                gaps[cam_angle] = []
            gaps[cam_angle].append(gap_coords)
    game_orig = copy.copy(game)

    if len(gaps) == 0:
        printwrite(f, 'There are no gaps at all on the edge of this floor triangle.')
        return
    
    y_inputs = [y for y in distinct_y_inputs if y==0 or abs(y) > 13]

    zero_speed_input_displacements = {}

    if game.is_pal:
        zero_speed_y_inputs = zero_speed_y_inputs_pal
    else:
        zero_speed_y_inputs = zero_speed_y_inputs_ntsc

    for ys in zero_speed_y_inputs:
        game = copy.copy(game_orig)
        game._update_banjo('jump', 0, 0)
        game._update_banjo('midair', 0, ys[0])
        game._update_banjo('midair', 0, ys[1])
        game._update_banjo('midair', 0, ys[2])
        game._update_banjo('midair', 0, ys[3])
        pos = copy.copy(game.banjo.pos)
        game.update('midair', 0, 0)
        assert np.array_equal(game.banjo.pos, pos)
        zero_speed_input_displacements[ys] = pos-game_orig.banjo.pos

    target_cam_angle = ml_vec3f_yaw_between(game.banjo.pos, game._get_target_camera_pos(game.banjo.pos))

    if target_cam_angle not in gaps:
        printwrite(f, 'There are no known gaps straight forwards/backwards on this floor triangle with this camera value.')
        return
    
    target_gaps = gaps[target_cam_angle]
    printwrite(f, len(target_gaps))

    excluded_gaps = 0
    float_precision = np.array(np.log2(np.abs(game_orig.banjo.pos)), dtype=int)

    nearest_gap_coord = None
    nearest_gap_dist = 999999999
    for gap in target_gaps:
        if not np.array_equal(float_precision, np.array(np.log2(np.abs(gap)), dtype=int)):
            excluded_gaps += 1
            continue
        
        dist = np.linalg.norm(gap-game.banjo.pos)
        if dist < nearest_gap_dist:
            nearest_gap_dist = dist
            nearest_gap_coord = gap

    if excluded_gaps > 0:
        printwrite(f, excluded_gaps, 'gaps excluded because they have a different float precision compared to current coordinate', game_orig.banjo.pos)
            
    if nearest_gap_coord is None:
        printwrite(f, 'No gaps left!')
        return

    goal_coords = {}

    printwrite(f, 'Computing goal coords...')
    for gap_coords in target_gaps:
        for y1234 in zero_speed_y_inputs:
            goal_coord = gap_coords - zero_speed_input_displacements[y1234]
            hopefully_equal_gap_coords = goal_coord + zero_speed_input_displacements[y1234]
            if np.array_equal(gap_coords, hopefully_equal_gap_coords):
                goal_coords[tuple(goal_coord)] = y1234
        if len(goal_coords) > 1_000_000:
            break

    printwrite(f, len(goal_coords))

    if len(goal_coords) < 1_000_000:
        for gap_coords in target_gaps:
            for y1234 in zero_speed_y_inputs:
                for y5678 in zero_speed_y_inputs:
                    goal_coord = gap_coords - zero_speed_input_displacements[y5678] - zero_speed_input_displacements[y1234]
                    hopefully_equal_gap_coords = goal_coord + zero_speed_input_displacements[y1234] + zero_speed_input_displacements[y5678]
                    if np.array_equal(gap_coords, hopefully_equal_gap_coords):
                        goal_coords[tuple(goal_coord)] = y1234 + y5678
            if len(goal_coords) > 1_000_000:
                break
                        
        printwrite(f, len(goal_coords))

    if len(goal_coords) < 100_000:
        printwrite(f, "Few gaps available, odds of failure are high.")

    game = copy.copy(game_orig)
    printwrite(f, game)

    dist = np.linalg.norm(nearest_gap_coord - game.banjo.pos)
    printwrite(f, 'Walking towards', nearest_gap_coord, '...')

    walkforward_inputs = []
    
    is_first = True

    while dist>1:
        game_copy = copy.copy(game)
        _, y_input = game.calculate_input_for_desired_pos_no_overshoot('walk', nearest_gap_coord)
        y_input = round(y_input)
        if abs(y_input) < 8:
            y_input = 0
        x_input = 0
        game_copy.update('walk', x_input, y_input)
        dist_new = np.linalg.norm(nearest_gap_coord - game_copy.banjo.pos)
        if dist_new+1 >= dist and not is_first:
            break
        if game_copy.camera.angle != game_orig.camera.angle:
            printwrite(f, 'Camera desync, will probably fail.')
            break
        dist = dist_new
        game = game_copy
        printwrite(f, game, x_input, y_input)
        inputstring.append({'x':x_input, 'y':y_input, 'A':0})
        walkforward_inputs.append((x_input, y_input))
        is_first = False

    if game.camera.angle != game_orig.camera.angle:
        printwrite(f, 'Camera desync, giving up')
        return

    printwrite(f, 'Searching for landing on a goal coord...')
    found = None
    
    for x1, y1 in distinct_inputs:
        game_copy1 = copy.copy(game)
        game_copy1.update('walk', x1, y1)
        if game_copy1.camera.angle != game_orig.camera.angle:
            continue
        angle_diff = (game.banjo.angle - game_copy1.banjo.angle)%360
        if 165 < angle_diff < 195:
            continue # prevent skidding which the sim doesn't support properly
        for x2, y2 in distinct_low_magnitudes:
            game_copy2 = copy.copy(game_copy1)
            game_copy2.update('walk', x2, y2)
            if game_copy2.camera.angle != game_orig.camera.angle:
                continue
            if tuple(game_copy2.banjo.pos) in goal_coords:
                printwrite(f, '!!!! FOUND !!!!')
                printwrite(f, game_copy1, x1, y1)
                inputstring.append({'x':x1, 'y':y1, 'A':0})
                printwrite(f, game_copy2, x2, y2)
                inputstring.append({'x':x2, 'y':y2, 'A':0})
                found = tuple(game_copy2.banjo.pos)
                game = game_copy2
                break
        if found:
            break

    if not found:
        printwrite(f, 'Found no results')
        return

    y_inputs = goal_coords[found]

    game.update('jump', 0, 0)
    printwrite(f, game, 'jump')
    inputstring.append({'x':0, 'y':0, 'A':1})
    for i in range(len(y_inputs)):
        game.update('midair', 0, y_inputs[i])
        printwrite(f, game, 0, y_inputs[i])
        inputstring.append({'x':0, 'y':y_inputs[i], 'A':1})

    if tuple(game.banjo.pos) in target_gaps:
        printwrite(f, 'Success!')
    else:
        expected_reached_pos = found
        for i in range(0, len(y_inputs), 4):
            expected_reached_pos += zero_speed_input_displacements[tuple(y_inputs[i:i+4])]
        printwrite(f, 'Failed to reach %s for some totally unknown reason!' % str(expected_reached_pos))
        return
        
    s = ''
    for inputs in inputstring:
        for _ in range(2):
            s += 'joypad.setanalog({["P1 X Axis"]=%d, ["P1 Y Axis"]=%d}) ' % (inputs['x'], inputs['y'])
            if inputs['A']:
                s += 'joypad.set({["P1 A"]="True"}) '
            else:
                s += 'joypad.set({["P1 A"]="False"}) '
            s += 'emu.frameadvance() '
            
    s += 'joypad.setanalog({["P1 X Axis"]=0, ["P1 Y Axis"]=0})'
    printwrite(f, s)

    
if __name__ == '__main__':

    # Intended to be trigged via lua, not run directly
    
    banjo = Banjo(pos=(argv[1], argv[2]), speed=(argv[3], argv[4]), angle=argv[5], moving=bool(int(argv[6])))
    camera = Camera(pos=(argv[7], argv[8]), speed=(argv[9], argv[10]), angle=argv[11], angular_momentum=argv[12])
    camera_pivot = CameraPivot(argv[13], argv[14], argv[15], argv[16], argv[17], argv[18], argv[19], argv[20], argv[21])
    game = Game(banjo, camera, camera_pivot, bool(int(argv[22])))

    outfile = open('stdout.log','w')
    do_search(game, f=outfile)
    outfile.close()

